{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
    <h1>Report</h1>
    <h2 id="kmom01">Kmom01</h2>
    {# <p>Berätta kort om dina förkunskaper och tidigare erfarenheter kring objektorientering.
Berätta kort om PHPs modell för klasser och objekt. Vilka är de grunder man behöver 
veta/förstå för att kunna komma igång och skapa sina första klasser?
Reflektera kort över den kodbas, koden, strukturen som användes till uppgiften me/report, hur uppfattar du den?

Med tanke på artikeln “PHP The Right Way”, vilka delar in den finner du extra intressanta och värdefulla? 
Är det några särskilda områden som du känner att du vill veta mer om? Lyft fram några delar av artikeln som du känner mer värdefulla. #}

Den enda direkta tidigare erfarenheten jag har med objektorientering är från OOPython-kursen. Spontant känns det ju som principen med 
OOp är densamma i många olika språk. Simpelt och generellt beskrivet är det ett sätt att skapa objekt som håller sina egna 
attribut och funktioner. Vilket låter som en logisk modell då människan har ett objektorienterad tankesätt, alla saker har sitt 
användningsområde. Generellt tycker jag PHPs sätt att skapa klasser och objekt påminner mycket om hur man gör i Python. Exempelvis hur man jobbar med 
eventuell konstruktor, setters och getters. Det som tydligt skiljer är att inget är privat i Python där använder man endast en namnkonvention för att visa att något 
ska hanteras som en tex privat attribut (_attribute). Försöker vi hantera ett privat attribut i PHP som ett publikt (utan setters/getters) så kommer vi få krashad kod eller massa fel. <br> <br>

Frågan "Berätta kort om PHPs modell för klasser och objekt. Vilka är de grunder man behöver 
veta/förstå för att kunna komma igång och skapa sina första klasser?" är inte helt självklar gällande vilket svar man min ha. Men 
ska man svara basic så bör man ha en uppfattaning om hur man ska tänka när man deklarerar sina attribut (ska dem vara public, prot, eller private?). 
Rimligt är också om man förstår vad en konstruktor gör samt att när ett object väl är skapat så är objektet en egen instans med ett eget 
state skapat utifrån en klass, man kan säga att klassen är en form av blueprint för ett eventuellt objekt. Ett annat sätt att se på det är att klasser 
är en möjligthet a samla kod som är relevanta för varandra och på så sätt få en bättre struktur och läsbarhet. <br><br>

Strukturen som används i denna uppgiften känns greppbar. Symfony upplevs inledningsvis som stort och tungjobbat när man kommer direkt från att ha använt Express(js). 
Men jag får uppfattningen att Symfony är lite mindre 'magiskt' än tex Express och ger användaren mer manuella möjligheter att hantera problem. Det känns såklart lite 
överväldigande i början men det leder i slutändan till en (förhoppningsvis) djupare förståelse för det man jobbar med. Phps dokumentation är dock ungefär lika 
smidig som Pythons vilket är lite synd, men så är det ibland. <br>


Artikeln 'PHP The right way' föll inte riktigt mig i smaken, det kändes väldigt svårt att avgöra vad som är är viktigt just nu och upplägget bär på samma misstag 
som dem flesta introduktionsartiklar, dem lägger tex 10 meningar på att förklara att en ny sak har kommit sedan version X och den är jättebra o.s.v.  sen efter massa 
(för tillfället) onödiga förklaringar skriver dem en mening om hur man ska använda funktionen/tekniken. Jag misstänker att artikeln blir mer användbar 
ju djupare man behöver dyka i PHP, men vid första anblick känns den lite oinspirerande. Nu lät jag lite negativ, den hade också såklart lite intressanta saker att bjuda på så som 
<a class="a-reset" href="https://phptherightway.com/#openclosed-principle">Open/closed principle</a> vilket är något jag, har blivit, men vill bli mycket bättre på. 
<br><br>
Än sålänge har min sida en grundläggande responsivitet men saknar en del anpassning i navbaren och andra småställen. Jag är osäker på hur mobilanpassad sidan behöver vara så jag 
har bara gjort lite basic anpassning.</p>

    <h2 id="kmom02">Kmom02</h2>
    <p>Kmom1</p>
    <h2 id="kmom03">Kmom03</h2>
    <p>Kmom1</p>
    <h2 id="kmom04">Kmom04</h2>
    <p>Kmom1</p>
    <h2 id="kmom05">Kmom05</h2>
    <p>Kmom1</p>
    <h2 id="kmom06">Kmom06</h2>
    <p>Kmom1</p>
    <h2 id="kmom10">Kmom06</h2>
    <p>Kmom1</p>

{% endblock %}