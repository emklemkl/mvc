{% extends "base.html.twig" %}

{% block title %}Metrics{% endblock %}

{% block body %}
<article class="article">
    <h1>Metrics</h1>
    <section>
        <h2>Introduktion</h2>
        <h3>Codestyle</h3>
        <p>
        Med kodstil så syftar man till de olika riktlinjer och standarder som finns. Det kan vara exempelvis namnkonventioner som camelCase och regler på hur lång en 
        rad ska vara, m.m. Syftet är att ska snygg och enhetlig kod som alla kan vänja sig vid. Att bestämma sig för en kodstandard blir ännu viktigare om man är fler som 
        arbetar på samma project. Annars riskerar koden att bli väldigt okonsekvent om alla gör på sig egna sätt. Det finns naturligtvis verktyg för att underlätta denna process, 
        ett exempel är linters.
        </p>

        <h3>Coverage</h3>
        <p>Syftar till att visa till vilken grad koden är testad. Min kod har i runda slängar 28% kodtäckning, vilket kan anses som ganska lågt. <br> PhpUnit har visar 
        tre olika nivåer på vad som anses vara bra procentuell kodtäckning:
        <ul>
            <li>- Low: 0% to 35%</li>
            <li>- Medium: 35% to 70%</li>
            <li>- High: 70% to 100%</li>
        </ul>
        <br>
        <p>
        Scrutinizer har dessa spann:
        </p>
        <ul>
            <li>- Low: 0% to 40%</li>
            <li>- Medium: 40% to 60%</li>
            <li>- High: 60% to 100%</li>
        </ul>
        </p>
        <h3>Complexity</h3>
        <p>Berör hur avancerad koden är att underhålla, förstå och vidareutveckla. Som tool-tip så definerar Scrutinizer "Total Complexity" som "The number of decision 
        points which change control flows (ifs, loops)". Exempelvis har min CardGraphics-class låg komplexitet då den inte innehåller några ifs, loopar eller likvärdigt.</p>
        <h3>Cohesion</h3>
        <p>
        Begreppet Cohesion relaterar till "Single Responsibility Principle". Alltså målet är att en klass ska ha ett tydligt syfte och inte sköta för många uppgifter. 
        Det är önskvärt att varje klass har ett tydligt syfte. Om en klass har för många ansvarsområden (low cohesion) så är det rimligt att undersöka om man kan bryta ut 
        funktionalitet från den klassen. Low cohesion riskerar även att spilla över till applikationen komplexitet.
        </p>
        <h3>Coupling</h3>
        <p>
        Handlar om hur olika klasser är beroende av varandra. Det är önskvärt att ha "low coupling" då det gör klasserna mer självständiga genom att inte vara beroende 
        av hur en annan klass agerar eller vilket state den befinner sig i. Om påverkan från en annan klass state hålls låg så ökar möjligheterna att utveckla vidare 
        koden utan att riskera att ta sönder externa klasser eller delar i programmet. Det leder till kod som är enklare och säkrare att jobba med.
        </p>
        <h3>CRAP</h3>
        <p>
        CRAP är ett mått på hur mycket arbete som krävs för att förbättra metoder som anses vara "crap". 
        Detta index kombinerar komplexitet och coverage för att uppskatta risken och svårigheten att underhålla en funktion. (Jag hittade dock inget i Phpmetrics om detta)
        </p>
    </section>


    <section>
        <h2>Phpmetrics</h2>
        <img class="image" src="{{ asset('img/metrics_lib.png') }}" alt="Metrics"> <br><br>
        <p>
        Från bilden ovan kan vi se att klassen både är komplex (6C) och saknar tester. Detta är till stor del väntat då det inte fanns krav att skriva tester under kmom05, samt 
        att ganska mycket logik för databaskommunikationen ligger i routesen i Controllern. Här finns två förbättringspotentialer på samma klass. Första delen är att skriva 
        tester, andra delen är att bryta ut databas-logiken från Controllersen och lägga den i en service istället. En vanlig klass skulle även fungera men det känns rimligt 
        att lägga databaskommunikationen som en service istället. <br><br>
        </p>
        <img class="image" src="{{ asset('img/metrics2_lib.png') }}" alt="Metrics"><br><br>
        <p>
        Det mest återkommande problemet med min kod verkar vara att Controllerna är för komplexa (6). Jag har bara två violations (som för övrigt är ganska flummiga), men man 
        ser även att GameController ligger på en hög komplexitet. Att lyckas hålla kod så simpel som möjligt är, enligt mig, ett bra fokus så jag ser även här att koden 
        behöver brytas ut i fler klasser, alternativt simplifieras.
        </p>
    </section>
    <section>
        <h2>Scrutinizer</h2>
            <p>I bilden nedanför så har vi det största klagomålet som Scrutinizer hade att erbjuda. Metoden försöker sköta flera olika delar som i sig beror till stor 
            del på vad det olika if-satserna leder. Koden fungerar som tänkt så man bör kanske inte "laga något som är sönder" men däremot så är metoden svår att förstår sig 
            på då det finns många olika vägar att ta. Det är ett tydligt exempel på "low cohesion", metoden gör så mycket så det är inte direkt tydligt vad det huvudsyfte är. </p>
            <img class="image" src="{{ asset('img/scrut_gameplay-cycle.png') }}" alt="Metrics"> <br><br>

            <p>Nästa fel lyder:</p>
            <q>The expression return $this->createQuer...getQuery()->getResult() could return the type integer which is incompatible with the type-hinted return array. 
            Consider adding an additional type-check to rule them out.</q>
            <br>
            <br>
            <p>Det låter egentligen inte som världens största problem, framför allt inte om man vet att felet inte kan inträffa, men jag tycker det är viktigt att nämna 
            då jag generellt förlitar mig på att return type hintsen stämmer när jag själv läser andras kod. Stämmer inte den så gör den ingen nytta. Detta felet är 
            ganska tydligt kopplat till kodstil (6C), man skulle väl även kunna anse att det berör cohesion lite grann med tanke på att metoden nu kan göra mer än 
            den borde (genom att returna en integer istället för en array). Då detta faller inom samma katergori så räknar jag även in dem få tillfällen där jag inte 
            använt rätt jämförare (så som (!empty($anArray)) istället för (!$anArray))</p>

            <p>Nästa förbättringspotential ligger i att städa upp i koden. Jag har ett flertal ställen där jag rent av varit slarvig och lämnat dubblerad kod 
            eller död kod. Detta påverkar inte appens funktionalitet, men det påverkar kodens läsbarhet och borde ligga i mitt intresse och min yrkesstolthet i att 
            lämna ett städat jobb bakom mig. Även detta kan kopplas till kodstilen bland 6C, det är inte kritiskt men det blir trevligare för alla om man håller det 
            snyggt och prydligt.</p> 
            <img class="image" src="{{ asset('img/scrut_dead_code.png') }}" alt="Metrics"> <br><br>

            <img src="https://scrutinizer-ci.com/g/emklemkl/mvcreport/badges/quality-score.png?b=main" alt="Scrutinizer badge">
            <img src="https://scrutinizer-ci.com/g/emklemkl/mvcreport/badges/coverage.png?b=main" alt="Scrutinizer badge">
            <img src="https://scrutinizer-ci.com/g/emklemkl/mvcreport/badges/build.png?b=main" alt="Scrutinizer badge">
            <img src="https://scrutinizer-ci.com/g/emklemkl/mvcreport/badges/code-intelligence.svg?b=main" alt="Scrutinizer badge">
        </section>
        <br>

    <section>
        <h2>Förbättringar</h2>
        <p>Den första förbättringen jag vill göra är att minska komplexiteten i gameplayCycle-metoden, det var den delen som fick mest kritik av scrutinizer. 
        Det känns som den viktigaste instatsen jag kan göra. Anledningen till att jag tycker detta är viktigt är hör man på nyckelordet "komplex", 
        vilket innebär att något är avancerat och svårt att förstå sig på. Den känns fullt 
        rimligt att sträva efter att göra saker o-komplexa. Denna uppdatering kommer höja Scrutinizers betyg på metoden genom att minska komplexiteten.</p>

        <p>Den andra förbättringen jag vill göra är att säkerställa att koden gör som förväntat genom att se till att type hintsen faktiskt stämmer och metoden returnar 
        det som står. Jag passar även på att uppdatera Php-specifika checks (så som (!empty($array)) istället för (!$array)). Syftet är att minska antalet buggar (som 
        Scrutinizer kommer hitta) och att följa best praxises. </p>

        <p>Den tredje förbättringen jag vill göra är att flytta ut databaskommunikationen från LibraryController till serviceklasser. 
        Detta minskar LibraryControllers arbetsbörda och gör att den får ett tydligare uppdrag, vilket följer Single Responsibility Principle och gör 
        koden enklare att återanvända. En service är enklare att testa isolerat, vilket gynnar framtida testmöjligheter.</p>

        <h3>Innan fix:</h3>
        <p>Man ser tydligt att LibraryController var väldigt komplex på flera plan innan jag uppdaterade koden</p>
          <img class="image" src="{{ asset('img/metrics_lib.png') }}" alt="Metrics"> <br><br>
        <h3>Efter fix:</h3>
        <p>Här ser vi tydliga förbättringar, den största förändringen jag gjorde var att implementera en service för att sköta databaskommunikationen. Då kunde jag 
        flytta en stor del av logiken till serviceklassen istället, detta minskade LibraryControllers Complexitet samt gav den högre cohesion då den nu har mindre  och 
        mer specifikt ansvarsområde. Det finns dock möjliget att flytta ut form handlern i en egen service också för att komma ner i komplexitet ännu mer. Men jag valde att 
        fokusera på databasdelen (annars kommer detta kmom ta för mycket tid). </p>
          <img class="image" src="{{ asset('img/metrics_lib_fixed.png') }}" alt="Metrics"> <br><br>
        <h3>Innan fix:</h3>
          <img class="image" src="{{ asset('img/metrics2_lib.png') }}" alt="Metrics"> <br><br>
        <h3>Efter fix:</h3>
        Det ser inte ut som att det har hänt jättemycket när man bara kolla på översikten. Men den cyklomatiska komplexiteten är det jag har fösökt fokusera på (se bild och text ovan).
        Jag lyckades dock sänka det redan låga average bugs med 0.1, samtidigt så drog jag på mig en violation till. Den var dock inte allvarlig så jag kände inte att det 
        var värt besväret.
          <img class="image" src="{{ asset('img/metrics2_lib_fixed.png') }}" alt="Metrics"> <br><br>
        <h3>Innan fix:</h3>
        <p>Det fanns lite för många avancerade conditions att hantera i metoden.</p>
          <img class="image" src="{{ asset('img/scrut_gameplay_cycle.png') }}" alt="Metrics"> <br><br> 
        <h3>Efter fix:</h3>
        <p>Genom att flytta ut if-satserna till en egen funktion så lyckades jag halvera antal conditions och CRAP-score. Metodens betyg ökade även från B till A. 
        Appens poäng ökade till 10/10 poäng nu efter uppdateringarna.</p>
          <img class="image" src="{{ asset('img/scrut_gameplay_cycle_fix.png') }}" alt="Metrics"> <br><br>
    </section>
    <section>
        <h2>Diskussion</h2>
        Kan man aktivt jobba med kodkvalitet och “clean code” på detta sättet?
        <p>Visst är det möjligt att jobba med "clean code" på detta sättet, förutsättningen är dock att man har ett bra verktyg som man hinner sätta sig in i och som 
        kompleterar mina brister som utvecklare. Scrutinizer gör väl detta till viss del, men det är en av de mer o-intuitiva hjälpmedel jag använt. Det krånglar men än det 
        gör nytta och har väldigt varierande kvalité på den feedback man får. Men jag ser ändå möjligheter med liknande vertyg om dem är mer genomtänkta. 
        Php-metrics gav väl lite samma känsla. Den visade relativt tydlig statistik och likvärdigt, men i många fall så kändes det inte som att alla värden faktiskt sa mig så mycket, 
        många förkortningar utan tooltips osv. Den stora nackdelen är väl just det att de kan ta mer energi än det är värt, framför allt i mindre projekt. Men jag skulle säga 
        att vikten av sådana hjälpmedel ökar i takt med storleken på applikationen och utvecklarteamet. Det hjälper folk att håller en standard samt så får alla samma förväntnigar på sig</p>
        <p>Andra sätt att jobba med clean code finns såklart, beroende på vilken nivå man vill lägga det på. Ett mer manuellt sätt är att engagera sig i diskussioner på 
        forum och mer kollegor om vad och varför något är clean code eller inte. Det finns inte nödvändigtvis ett empiriskt bevisat resultat på vad som är "renast kod". 
        Även om det finns generella mallar och best practises så betyder inte det att det är "bäst". Det kanske är det bästa just nu, men genom diskution och intresset 
        kanske man kan komma på något ännu bättre.</p>

    </section>
</article>
{% endblock %}